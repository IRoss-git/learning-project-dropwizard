<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
    <property name="now" value="now()" dbms="postgresql"/>
    <changeSet id="0.0.1" author="Ilya-Ross">
        <createTable tableName="payment_processor">
            <column name="ID" type="uuid">
                <constraints nullable="false"
                             primaryKey="true"/>
            </column>
            <column name="KEY" type="VARCHAR(45)">
                <constraints unique="true" nullable="false"/>
            </column>
            <column name="NAME" type="VARCHAR(45)">
                <constraints nullable="false" unique="false"/>
            </column>
            <column name="DESCRIPTION" type="VARCHAR(45)">
                <constraints nullable="false" unique="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="0.0.2" author="Ilya-Ross">
        <createTable tableName="payment_failure_reason">
            <column name="ID" type="uuid">
                <constraints nullable="false"
                             primaryKey="true"/>
            </column>
            <column name="CODE" type="VARCHAR(21)">
                <constraints unique="true" nullable="false"/>
            </column>
            <column name="NAME" type="VARCHAR(45)">
                <constraints nullable="false" unique="false"/>
            </column>
            <column name="DESCRIPTION" type="VARCHAR(45)">
                <constraints nullable="false" unique="false"/>
            </column>
            <column name="PROCESSOR_ID" type="UUID">
                <constraints foreignKeyName="payment_processor_fk" references="payment_processor(id)"
                             nullable="false"
                             deleteCascade="true"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet id="0.0.3" author="Ilya-Ross">
        <createTable tableName="generic_failure_reason">
            <column name="ID" type="uuid">
                <constraints nullable="false"
                             primaryKey="true"/>
            </column>
            <column name="CODE" type="VARCHAR(21)">
                <constraints unique="true" nullable="false"/>
            </column>
            <column name="NAME" type="VARCHAR(45)">
                <constraints nullable="false" unique="false"/>
            </column>
            <column name="DESCRIPTION" type="VARCHAR(45)">
                <constraints nullable="false" unique="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet id="0.0.4" author="Ilya-Ross">
        <createTable tableName="failure_reason_mapping">
            <column name="PAYMENT_FAILURE_REASON_ID" type="UUID">
                <constraints foreignKeyName="payment_failure_reason_fk" references="PAYMENT_FAILURE_REASON(id)"
                             nullable="false"
                             deleteCascade="true"/>
            </column>
            <column name="GENERIC_FAILURE_REASON_ID" type="UUID">
                <constraints foreignKeyName="generic_failure_reason_fk" references="GENERIC_FAILURE_REASON(id)"
                             nullable="false"
                             deleteCascade="true"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet id="0.0.5" author="Ilya-Ross">
        <addUniqueConstraint
                columnNames="PAYMENT_FAILURE_REASON_ID, GENERIC_FAILURE_REASON_ID"
                constraintName="mapping_payment_failure_unique_constraint"
                tableName="failure_reason_mapping"/>
    </changeSet>
    <changeSet id="0.0.6" author="Ilya-Ross">
        <addUniqueConstraint
                columnNames="ID, PROCESSOR_ID"
                constraintName="payment_failure_unique_constraint"
                tableName="payment_failure_reason"/>
    </changeSet>
    <changeSet id="0.0.7" author="Ilya-Ross">
        <sql>
            create table logged_actions
            (
                table_name    text                     not null,
                user_name     text,
                action_tstamp timestamp with time zone not null default current_timestamp,
                action        TEXT                     NOT NULL check (action in ('I','D','U')),
                original_data text,
                 new_data text,
                 query text
            );

            CREATE OR REPLACE FUNCTION if_modified_func() RETURNS trigger AS
            '
            DECLARE
                v_old_data TEXT;
                v_new_data TEXT;
            BEGIN
                if (TG_OP = ''UPDATE'') then
                    v_old_data := ROW(OLD.*);
                    v_new_data := ROW(NEW.*);
                    insert into logged_actions (table_name, user_name, action, original_data, new_data, query)
                    values (TG_TABLE_NAME::TEXT, session_user::TEXT, substring(TG_OP, 1, 1), v_old_data, v_new_data,current_query());
                    RETURN NEW;
                elsif (TG_OP = ''DELETE'') then
                    v_old_data := ROW(OLD.*);
                    insert into logged_actions (table_name, user_name, action, original_data, query)
                    values (TG_TABLE_NAME::TEXT, session_user::TEXT, substring(TG_OP, 1, 1), v_old_data, current_query());
                    RETURN OLD;
                 elsif (TG_OP = ''INSERT'') then
                     v_new_data := ROW(NEW.*);
                     insert into logged_actions (table_name, user_name, action, new_data, query)
                     values (TG_TABLE_NAME::TEXT, session_user::TEXT, substring(TG_OP, 1, 1), v_new_data, current_query());
                        RETURN NEW;
                else RAISE WARNING ''[IF_MODIFIED_FUNC] - Other action occurred: %, at %'',TG_OP,now();

                    end if;
            EXCEPTION
                WHEN data_exception THEN
                    RAISE WARNING ''[IF_MODIFIED_FUNC] - UDF ERROR [DATA EXCEPTION] - SQLSTATE: %, SQLERRM: %'',SQLSTATE,SQLERRM;
                    RETURN NULL;
                WHEN unique_violation THEN
                    RAISE WARNING ''[IF_MODIFIED_FUNC] - UDF ERROR [UNIQUE] - SQLSTATE: %, SQLERRM: %'',SQLSTATE,SQLERRM;
                    RETURN NULL;
                WHEN others THEN
                    RAISE WARNING ''[IF_MODIFIED_FUNC] - UDF ERROR [OTHER] - SQLSTATE: %, SQLERRM: %'',SQLSTATE,SQLERRM;
                    RETURN NULL;
                END;
            '
            LANGUAGE plpgsql;

            CREATE TRIGGER payment_processor_audit
                AFTER INSERT OR
            UPDATE OR
            DELETE
            ON payment_processor
                FOR EACH ROW EXECUTE PROCEDURE if_modified_func();

            CREATE TRIGGER payment_failure_reason_audit
                AFTER INSERT OR
            UPDATE OR
            DELETE
            ON payment_failure_reason
                FOR EACH ROW EXECUTE PROCEDURE if_modified_func();

            CREATE TRIGGER generic_failure_reason_audit
                AFTER INSERT OR
            DELETE
            ON generic_failure_reason
                FOR EACH ROW EXECUTE PROCEDURE if_modified_func();

            CREATE TRIGGER failure_reason_mapping_audit
                AFTER INSERT OR
            DELETE
            ON failure_reason_mapping
                FOR EACH ROW EXECUTE PROCEDURE if_modified_func();
        </sql>
    </changeSet>

</databaseChangeLog>
